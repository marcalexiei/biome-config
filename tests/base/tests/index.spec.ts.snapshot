exports[`import extensions 1`] = `
[
  "src/import-extensions.ts:1:27 lint/correctness/useImportExtensions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Add a file extension for relative imports.",
  "  ",
  "  > 1 │ import { fetchData } from './utils';",
  "      │                           ^^^^^^^^^",
  "    2 │ ",
  "    3 │ typeof fetchData;",
  "  ",
  "  i Explicit import improves compatibility with browsers and makes file resolution in tooling faster.",
  "  ",
  "  i Safe fix: Add import extension .ts.",
  "  ",
  "    1   │ - import·{·fetchData·}·from·'./utils';",
  "      1 │ + import·{·fetchData·}·from·'./utils.ts';",
  "    2 2 │   ",
  "    3 3 │   typeof fetchData;",
  "  ",
  "",
  "lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Some errors were emitted while running checks.",
  "  ",
  "",
  ""
]
`;

exports[`no imports cycle 1`] = `
[
  "src/no-imports-cycle/a.ts:2:19 lint/nursery/noImportCycles ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × This import is part of a cycle.",
  "  ",
  "    1 │ // biome-ignore lint/style/noExportedImports: testing cycle",
  "  > 2 │ import { B } from './b.ts';",
  "      │                   ^^^^^^^^",
  "    3 │ ",
  "    4 │ typeof B;",
  "  ",
  "  i This import resolves to src/no-imports-cycle/b.ts",
  "        ... which imports src/no-imports-cycle/a.ts",
  "        ... which is the file we're importing from.",
  "  ",
  "",
  "src/no-imports-cycle/b.ts:1:19 lint/nursery/noImportCycles ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × This import is part of a cycle.",
  "  ",
  "  > 1 │ import { A } from './a.ts';",
  "      │                   ^^^^^^^^",
  "    2 │ ",
  "    3 │ A.trim();",
  "  ",
  "  i This import resolves to src/no-imports-cycle/a.ts",
  "        ... which imports src/no-imports-cycle/b.ts",
  "        ... which is the file we're importing from.",
  "  ",
  "",
  "lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Some errors were emitted while running checks.",
  "  ",
  "",
  ""
]
`;

exports[`simple file 1`] = `
[
  "src/utils.ts:1:14 lint/style/useConsistentArrayType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Use Array<T> syntax instead of shorthand T[] syntax.",
  "  ",
  "  > 1 │ const array: string[] = [];",
  "      │              ^^^^^^^^",
  "    2 │ const array2: Array<string> = [];",
  "    3 │ ",
  "  ",
  "  i Unsafe fix: Use Array<T> syntax to replace",
  "  ",
  "     1    │ - const·array:·string[]·=·[];",
  "        1 │ + const·array:·Array<string>·=·[];",
  "     2  2 │   const array2: Array<string> = [];",
  "     3  3 │   ",
  "  ",
  "",
  "src/utils.ts:6:8 lint/suspicious/useAwait ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × This async function lacks an await expression.",
  "  ",
  "     4 │ console.info(array, array2);",
  "     5 │ ",
  "   > 6 │ export async function fetchData() {",
  "       │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
  "   > 7 │   var ciao = 1;",
  "   > 8 │   console.info(ciao);",
  "   > 9 │   // Missing \`await\` for the promise returned by \`fetch\`",
  "  > 10 │   return fetch('/data');",
  "  > 11 │ }",
  "       │ ^",
  "    12 │ ",
  "  ",
  "  i Remove this async modifier, or add an await expression in the function.",
  "  ",
  "     4 │ console.info(array, array2);",
  "     5 │ ",
  "   > 6 │ export async function fetchData() {",
  "       │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
  "   > 7 │   var ciao = 1;",
  "   > 8 │   console.info(ciao);",
  "   > 9 │   // Missing \`await\` for the promise returned by \`fetch\`",
  "  > 10 │   return fetch('/data');",
  "  > 11 │ }",
  "       │ ^",
  "    12 │ ",
  "  ",
  "  i Async functions without await expressions may not need to be declared async.",
  "  ",
  "",
  "src/utils.ts:4:1 lint/suspicious/noConsole  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Don't use console.",
  "  ",
  "    2 │ const array2: Array<string> = [];",
  "    3 │ ",
  "  > 4 │ console.info(array, array2);",
  "      │ ^^^^^^^^^^^^",
  "    5 │ ",
  "    6 │ export async function fetchData() {",
  "  ",
  "  i The use of console is often reserved for debugging.",
  "  ",
  "  i Unsafe fix: Remove console.",
  "  ",
  "     1  1 │   const array: string[] = [];",
  "     2  2 │   const array2: Array<string> = [];",
  "     3    │ - ",
  "     4    │ - console.info(array,·array2);",
  "     5  3 │   ",
  "     6  4 │   export async function fetchData() {",
  "  ",
  "",
  "src/utils.ts:7:3 lint/suspicious/noVar  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Use let or const instead of var.",
  "  ",
  "    6 │ export async function fetchData() {",
  "  > 7 │   var ciao = 1;",
  "      │   ^^^^^^^^^^^^",
  "    8 │   console.info(ciao);",
  "    9 │   // Missing \`await\` for the promise returned by \`fetch\`",
  "  ",
  "  i A variable declared with var is accessible in the whole body of the function. Thus, the variable can be accessed before its initialization and outside the block where it is declared.",
  "  ",
  "  i See MDN web docs for more details.",
  "  ",
  "  i Unsafe fix: Use 'const' instead.",
  "  ",
  "     5  5 │   ",
  "     6  6 │   export async function fetchData() {",
  "     7    │ - ··var·ciao·=·1;",
  "        7 │ + ··const·ciao·=·1;",
  "     8  8 │     console.info(ciao);",
  "     9  9 │     // Missing \`await\` for the promise returned by \`fetch\`",
  "  ",
  "",
  "src/utils.ts:8:3 lint/suspicious/noConsole  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Don't use console.",
  "  ",
  "     6 │ export async function fetchData() {",
  "     7 │   var ciao = 1;",
  "   > 8 │   console.info(ciao);",
  "       │   ^^^^^^^^^^^^",
  "     9 │   // Missing \`await\` for the promise returned by \`fetch\`",
  "    10 │   return fetch('/data');",
  "  ",
  "  i The use of console is often reserved for debugging.",
  "  ",
  "  i Unsafe fix: Remove console.",
  "  ",
  "     6  6 │   export async function fetchData() {",
  "     7  7 │     var ciao = 1;",
  "     8    │ - ··console.info(ciao);",
  "     9  8 │     // Missing \`await\` for the promise returned by \`fetch\`",
  "    10  9 │     return fetch('/data');",
  "  ",
  "",
  "lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
  "",
  "  × Some errors were emitted while running checks.",
  "  ",
  "",
  ""
]
`;
